#ifndef DATASTRUCTURES_H
#define DATASTRUCTURES_H
#include <vector>
#include <string>

using namespace std;

// Define a struct to hold static atom information
struct AcidInfo {
    std::string name;
    int heavyAtoms;
    int totalAtoms;
    vector<string> atomNames;
    vector<unsigned short> atomConnections;
    vector<vector<short>> bdc;
};

// Define a struct to hold loaded atom information
struct LoadAtomInfo {
    string atomName; // len 4 
    string residue; // len 3 - residue name  ->(resd)
    unsigned short seqNumber; // 4 dig max - residue sequence number ->(tkfpres)
    double x; // F8.3 ->(xx0)
    double y; // F8.3 ->(yy0)
    double z; // F8.3 ->(zz0)  
    string kfp; // len 30  - first 30 symbols of the data string to rewrite to an output
};

class ServiceData {
public:

    vector<vector<double>> bd0;
    vector<vector<vector<double>>> ag0;

    const double PI = 3.1415926, HPI = 0.017453; // Use own Pi and HPI = Pi/180.0
    const double minDist = 0.001; // minimal distance in calculations
    const vector<string> atomConType =
    {"CT1","CT2","CT3","C","CC","CPH1","CPH2","CPT","N","NH1","NH2","NH3","NC2","CY","NR2","NY","H","HA","HB","HC","HS","HR1","CA","HR3","HP","O","OC","OH1","S","CP1","CP2","CP3","NP"};
    // Define the data for 20 amino acids
    const vector<AcidInfo> aminoAcids = {
        {"GLY", 4, 7,   {" N  ", " CA ", " C  ", " O  ", " H  ", "1HA ", "2HA "},
                        {10, 2, 4, 26, 17, 19, 19},
                        {{ 1, 4, 0, 0},
                        { 4,-1, 1, 5},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-4, 0, 0, 0},
                        {-4, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-3, 0, 0, 0}}},
        {"ALA", 5, 10,  {" N  "," CA "," C  "," O  "," CB "," H  "," HA ","1HB ","2HB ","3HB "},
                        {10,1,4,26,3,17,19,18,18,18},
                        {{ 1, 5, 0, 0},
                        { 3,-1, 1, 5},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 3, 4, 5},
                        {-5, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-3, 0, 0, 0},
                        {-4, 0, 0, 0},
                        {-5, 0, 0, 0}}},
        {"SER", 6, 11,  {" N  "," CA "," C  "," O  "," CB "," OG "," H  "," HA ","1HB ","2HB "," HG "},
                        {10,1,4,26,2,28,17,19,18,18,17},
                        {{ 1, 6, 0, 0},
                        { 3,-1, 1, 6},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 5, 4},
                        {-1, 5, 0, 0},
                        {-6, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-4, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-5, 0, 0, 0}}},
        {"CYS", 6, 11,  {" N  "," CA "," C  "," O  "," CB "," SG "," H  "," HA ","1HB ","2HB "," HG "},
                        {10,1,4,26,2,29,17,19,18,18,21},
                        {{ 1, 6, 0, 0},
                        { 3,-1, 1, 6},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 5, 4},
                        {-1, 5, 0, 0},
                        {-6, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-4, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-5, 0, 0, 0}}},
        {"VAL", 7, 16,  {" N  "," CA "," C  "," O  "," CB "," CG1"," CG2"," H  "," HA "," HB ","1HG1","2HG1","3HG1","1HG2","2HG2","3HG2"},
                        {10,1,4,26,1,3,3,17,19,18,18,18,18,18,18,18},
                        {{ 1, 7, 0, 0},
                        { 3,-1, 1, 7},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 2, 5},
                        {-1, 5, 7, 0},
                        {-2, 7, 8, 9},
                        {-7, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0}}},
        {"THR", 7, 14,  {" N  "," CA "," C  "," O  "," CB "," OG1"," CG2"," H  "," HA "," HB "," HG1","1HG2","2HG2","3HG2"},
                        {10,1,4,26,1,28,3,17,19,18,17,18,18,18},
                        {{ 1, 7, 0, 0},
                        { 3,-1, 1, 7},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 2, 5},
                        {-1, 5, 0, 0},
                        {-2, 5, 6, 7},
                        {-7, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0}}},
        {"ILE", 8, 19,  {" N  "," CA "," C  "," O  "," CB "," CG1"," CG2"," CD1"," H  "," HA "," HB ","1HG1","2HG1","1HG2","2HG2","3HG2","1HD1","2HD1","3HD1"},
                        {10,1,4,26,1,2,3,3,17,19,18,18,18,18,18,18,18,18,18},
                        {{ 1, 8, 0, 0},
                        { 3,-1, 1, 8},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 2, 6},
                        {-1, 2, 6, 7},
                        {-2, 7, 8, 9},
                        {-2, 9,10,11},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-11, 0, 0, 0}}},
        {"PRO", 7, 14,  {" N  "," CA "," C  "," O  "," CB "," CG "," CD "," HA ","1HB ","2HB ","1HG ","2HG ","1HD ","2HD "},
                        {9,30,4,26,31,31,32,19,18,18,18,18,18,18},
                        {{ 1, 6, 0, 0},
                        { 3,-1, 1, 6},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 4, 5},
                        {-1, 1, 5, 6},
                        {-1,-6, 6, 7},
                        {-6, 0, 0, 0},
                        {-4, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0}}},
        {"MET", 8, 17,  {" N  "," CA "," C  "," O  "," CB "," CG "," SD "," CE "," H  "," HA ","1HB ","2HB ","1HG ","2HG ","1HE ","2HE ","3HE "},
                        {10,1,4,26,2,2,29,3,17,19,18,18,18,18,18,18,18},
                        {{ 1, 8, 0, 0},
                        { 3,-1, 1, 8},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 7, 6},
                        {-1, 1, 7, 8},
                        {-1, 1, 0, 0},
                        {-1, 7, 8, 9},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0}}},
        {"ASP", 8, 12,  {" N  "," CA "," C  "," O  "," CB "," CG "," OD1"," OD2"," H  "," HA ","1HB ","2HB "},
                        {10,1,4,26,2,5,27,27,17,19,18,18},
                        {{ 1, 8, 0, 0},
                        { 3,-1, 1, 8},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 7, 6},
                        {-1, 1, 2, 0},
                        {-1, 0, 0, 0},
                        {-2, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0}}},
        {"ASN", 8, 14,  {" N  "," CA "," C  "," O  "," CB "," CG "," OD1"," ND2"," H  "," HA ","1HB ","2HB ","1HD2","2HD2"},
                        {10,1,4,26,2,5,26,11,17,19,18,18,17,17},
                        {{ 1, 8, 0, 0},
                        { 3,-1, 1, 8},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 7, 6},
                        {-1, 1, 2, 0},
                        {-1, 0, 0, 0},
                        {-2, 5, 6, 0},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-5, 0, 0, 0},
                        {-6, 0, 0, 0}}},
        {"LEU", 8, 19,  {" N  "," CA "," C  "," O  "," CB "," CG "," CD1"," CD2"," H  "," HA ","1HB ","2HB "," HG ","1HD1","2HD1","3HD1","1HD2","2HD2","3HD2"},
                        {10,1,4,26,2,1,3,3,17,19,18,18,18,18,18,18,18,18,18},
                        {{ 1, 8, 0, 0},
                        { 3,-1, 1, 8},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 7, 6},
                        {-1, 1, 2, 7},
                        {-1, 7, 8, 9},
                        {-2, 9,10,11},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-6, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-11, 0, 0, 0}}},
        {"LYS", 9, 22,  {" N  "," CA "," C  "," O  "," CB "," CG "," CD "," CE "," NZ "," H  "," HA ","1HB ","2HB ","1HG ","2HG ","1HD ","2HD ","1HE ","2HE ","1HZ ","2HZ ","3HZ "},
                        {10,1,4,26,2,2,2,2,12,17,19,18,18,18,18,18,18,18,18,20,20,20},
                        {{ 1, 9, 0, 0},
                        { 3,-1, 1, 9},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 8, 7},
                        {-1, 1, 8, 9},
                        {-1, 1, 9,10},
                        {-1, 1,10,11},
                        {-1,11,12,13},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-13, 0, 0, 0}}},
        {"GLU", 9, 15,  {" N  "," CA "," C  "," O  "," CB "," CG "," CD "," OE1"," OE2"," H  "," HA ","1HB ","2HB ","1HG ","2HG "},
                        {10,1,4,26,2,2,5,27,27,17,19,18,18,18,18},
                        {{ 1, 9, 0, 0},
                        { 3,-1, 1, 9},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 8, 7},
                        {-1, 1, 8, 9},
                        {-1, 1, 2, 0},
                        {-1, 0, 0, 0},
                        {-2, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0}}},
        {"GLN", 9, 17,  {" N  "," CA "," C  "," O  "," CB "," CG "," CD "," OE1"," NE2"," H  "," HA ","1HB ","2HB ","1HG ","2HG ","1HE2","2HE2"},
                        {10,1,4,26,2,2,5,26,11,17,19,18,18,18,18,17,17},
                        {{ 1, 9, 0, 0},
                        { 3,-1, 1, 9},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 8, 7},
                        {-1, 1, 8, 9},
                        {-1, 1, 2, 0},
                        {-1, 0, 0, 0},
                        {-2, 7, 8, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-7, 0, 0, 0},
                        {-8, 0, 0, 0}}},
        {"ARG", 11, 24, {" N  "," CA "," C  "," O  "," CB "," CG "," CD "," NE "," CZ "," NH1"," NH2"," H  "," HA ","1HB ","2HB ","1HG ","2HG ","1HD ","2HD "," HE ","1HH1","2HH1","1HH2","2HH2"},
                        {10,1,4,26,2,2,2,13,4,13,13,17,19,18,18,18,18,18,18,20,20,20,20,20},
                        {{ 1,11, 0, 0},
                        { 3,-1, 1,11},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1,10, 9},
                        {-1, 1,10,11},
                        {-1, 1,11,12},
                        {-1, 1,12, 0},
                        {-1, 1, 2, 0},
                        {-1,11,12, 0},
                        {-2,12,13, 0},
                        {-11, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-13, 0, 0, 0}}},
        {"HIS", 10, 17, {" N  "," CA "," C  "," O  "," CB "," CG "," ND1"," CD2"," CE1"," NE2"," H  "," HA ","1HB ","2HB "," HD1"," HD2"," HE1"},
                        {10,1,4,26,2,6,15,6,7,15,17,19,18,18,17,22,22},
                        {{ 1,10, 0, 0},
                        { 3,-1, 1,10},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1, 9, 8},
                        {-1, 1, 2, 0},
                        {-1, 2, 8, 0},
                        {-2, 2, 8, 0},
                        {-2, 1, 8, 0},
                        { 0, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0},
                        {-8, 0, 0, 0}}},
        {"PHE", 11, 20, {" N  "," CA "," C  "," O  "," CB "," CG "," CD1"," CD2"," CE1"," CE2"," CZ "," H  "," HA ","1HB ","2HB "," HD1"," HD2"," HE1"," HE2"," HZ "},
                        {10,1,4,26,2,23,23,23,23,23,23,17,19,18,18,25,25,25,25,25},
                        {{ 1,11, 0, 0},
                        { 3,-1, 1,11},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1,10, 9},
                        {-1, 1, 2, 0},
                        {-1, 2, 9, 0},
                        {-2, 2, 9, 0},
                        {-2, 2, 9, 0},
                        {-2, 1, 9, 0},
                        {-2,-1, 9, 0},
                        {-11, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0},
                        {-9, 0, 0, 0}}},
        {"TYR", 12, 21, {" N  "," CA "," C  "," O  "," CB "," CG "," CD1"," CD2"," CE1"," CE2"," CZ "," OH "," H  "," HA ","1HB ","2HB "," HD1"," HD2"," HE1"," HE2"," HH "},
                        {10,1,4,26,2,23,23,23,23,23,23,28,17,19,18,18,25,25,25,25,17},
                        {{ 1,12, 0, 0},
                        { 3,-1, 1,12},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1,11,10},
                        {-1, 1, 2, 0},
                        {-1, 2,10, 0},
                        {-2, 2,10, 0},
                        {-2, 2,10, 0},
                        {-2, 1,10, 0},
                        {-2,-1, 1, -2},
                        {-1, 9, 0, 0},
                        {-12, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-9, 0, 0, 0}}},
        {"TRP", 14, 24, {" N  "," CA "," C  "," O  "," CB "," CG "," CD1"," CD2"," NE1"," CE2"," CE3"," CZ2"," CZ3"," CH2"," H  "," HA ","1HB ","2HB "," HD1"," HE1"," HE3"," HZ2"," HZ3"," HH2"},
                        {10,1,4,26,2,14,23,8,16,8,23,23,23,23,17,19,18,18,25,17,25,25,25,25},
                        {{ 1,14, 0, 0},
                        { 3,-1, 1,14},
                        {-1, 0, 1, 0},
                        {-1, 0, 0, 0},
                        {-3, 1,13,12},
                        {-1, 1, 2, 0},
                        {-1, 2,12, 0},
                        {-2, 2, 3, 0},
                        {-2, 1,11, 0},
                        {-1,-2, 2, 0},
                        {-3, 2,10, 0},
                        {-2, 2,10, 0},
                        {-2, 1,10, 0},
                        {-1,-2,10, 0},
                        {-14, 0, 0, 0},
                        {-14, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-13, 0, 0, 0},
                        {-12, 0, 0, 0},
                        {-11, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0},
                        {-10, 0, 0, 0}}},
    };


    ServiceData(): bd0(33, vector<double>(33,0)), ag0(33, vector<vector<double>>(33,vector<double>(33,0))) {
        bd0[3][3]=1.335; 
        bd0[22][22]=1.375; 
        bd0[3][22]=1.49; 
        bd0[4][22]=1.49; 
        bd0[29][30]=1.527; 
        bd0[30][30]=1.537; 
        bd0[30][31]=1.537; 
        bd0[5][5]=1.36;   
        bd0[7][22]=1.368; 
        bd0[7][7]=1.4; 
        bd0[0][0]=1.5; 
        bd0[0][1]=1.538; 
        bd0[0][2]=1.538; 
        bd0[0][3]=1.49; 
        bd0[0][4]=1.522; 
        bd0[1][1]=1.53; 
        bd0[1][2]=1.528; 
        bd0[1][3]=1.49; 
        bd0[1][4]=1.522; 
        bd0[1][5]=1.5; 
        bd0[1][13]=1.51; 
        bd0[1][22]=1.49; 
        bd0[2][2]=1.53; 
        bd0[2][3]=1.49; 
        bd0[2][22]=1.49; 
        bd0[2][4]=1.522; 
        bd0[2][5]=1.5; 
        bd0[13][22]=1.365; 
        bd0[7][13]=1.44; 
        bd0[3][29]=1.49;
        bd0[4][29]=1.49;
        bd0[17][22]=1.083; 
        bd0[4][17]=1.1;  
        bd0[17][30]=1.111; 
        bd0[17][31]=1.111; 
        bd0[0][17]=1.111;
        bd0[1][17]=1.111;
        bd0[2][17]=1.111; 
        bd0[13][17]=1.08; 
        bd0[18][30]=1.08; 
        bd0[0][18]=1.08;
        bd0[1][18]=1.08;
        bd0[2][18]=1.08; 
        bd0[22][24]=1.08; 
        bd0[13][24]=1.08; 
        bd0[5][21]=1.083;
        bd0[6][21]=1.09; 
        bd0[18][29]=1.08;
        bd0[3][8]=1.3;  
        bd0[8][29]=1.434; 
        bd0[8][31]=1.455; 
        bd0[3][12]=1.365; 
        bd0[1][12]=1.49;
        bd0[2][12]=1.49; 
        bd0[12][19]=1.0; 
        bd0[3][9]=1.345;
        bd0[0][9]=1.43;
        bd0[1][9]=1.43;
        bd0[2][9]=1.43; 
        bd0[9][16]=0.997; 
        bd0[9][19]=0.98; 
        bd0[4][10]=1.36; 
        bd0[1][10]=1.455;
        bd0[2][10]=1.455; 
        bd0[0][11]=1.48;
        bd0[1][11]=1.48;
        bd0[2][11]=1.48; 
        bd0[11][19]=1.04; 
        bd0[5][14]=1.38; 
        bd0[6][14]=1.32;
        bd0[15][22]=1.37; 
        bd0[7][15]=1.375; 
        bd0[15][16]=0.976; 
        bd0[10][16]=1.0;
        bd0[14][16]=1.0;
        bd0[8][26]=1.455;
        bd0[3][25]=1.23; 
        bd0[4][25]=1.23;
        bd0[22][26]=1.26; 
        bd0[4][26]=1.26; 
        bd0[3][26]=1.26; 
        bd0[1][26]=1.33;
        bd0[2][26]=1.33; 
        bd0[22][27]=1.411; 
        bd0[0][27]=1.42;
        bd0[1][27]=1.42;
        bd0[2][27]=1.42; 
        bd0[16][27]=0.96; 
        bd0[1][28]=1.818;
        bd0[2][28]=1.816; 
        bd0[20][28]=1.325; 
        bd0[29][32]=1.485;
        bd0[31][32]=1.502;
        bd0[19][32]=1.006;
        //******************************************
        ag0[22][22][22]=120.0;
        ag0[3][8][29]=117.0;
        ag0[3][29][30]=112.3;
        ag0[4][29][30]=112.3;
        ag0[29][30][30]=108.5;
        ag0[30][30][31]=108.5;
        ag0[3][8][31]=117.0;
        ag0[29][8][31]=114.2;
        ag0[5][14][6]=104.0;
        ag0[7][22][22]=118.0;
        ag0[7][7][22]=122.0;
        ag0[7][13][22]=107.4;
        ag0[7][15][22]=108.0;
        ag0[0][0][3]=108.0;
        ag0[0][0][4]=108.0;
        ag0[0][0][0]=111.0;
        ag0[0][0][1]=111.0;
        ag0[0][0][2]=108.5;
        ag0[0][1][0]=113.5;
        ag0[0][1][1]=113.5;
        ag0[0][1][2]=113.5;
        ag0[0][1][4]=108.0;
        ag0[0][1][5]=113.0;
        ag0[0][1][13]=114.0;
        ag0[0][1][22]=107.5;
        ag0[0][9][3]=120.0;
        ag0[1][22][22]=122.3;
        ag0[1][5][5]=130.0;
        ag0[1][0][2]=114.0;
        ag0[1][0][3]=108.0;
        ag0[1][0][4]=108.0;
        ag0[1][1][3]=108.0;
        ag0[1][1][4]=108.0;
        ag0[1][1][1]=113.5;
        ag0[1][1][2]=115.0;
        ag0[1][1][13]=114.0;
        ag0[1][13][22]=129.4;
        ag0[1][13][7]=124.0;
        ag0[1][12][3]=120.0;
        ag0[1][9][3]=120.0;
        ag0[1][28][2]=95.0;
        ag0[2][22][22]=122.3;
        ag0[2][5][5]=130.0;
        ag0[2][0][2]=114.0;
        ag0[2][0][3]=108.0;
        ag0[2][0][4]=108.0;
        ag0[2][0][22]=107.5;
        ag0[2][1][22]=107.5;
        ag0[2][1][5]=113.0;
        ag0[2][1][5]=114.0;
        ag0[2][12][3]=120.0;
        ag0[2][9][3]=109.6;
        ag0[7][7][13]=107.4;
        ag0[13][7][22]=130.0;
        ag0[3][9][16]=123.0;
        ag0[0][9][16]=117.0;
        ag0[1][9][16]=117.0;
        ag0[2][9][16]=117.0;
        ag0[4][9][16]=120.0;
        ag0[16][9][16]=120.0;
        ag0[16][15][22]=126.0;
        ag0[7][15][16]=126.0;
        ag0[16][27][22]=108.0;
        ag0[0][27][16]=106.0;
        ag0[1][27][16]=106.0;
        ag0[2][27][16]=106.0;
        ag0[17][22][22]=120.0;
        ag0[7][22][17]=122.0;
        ag0[13][22][17]=125.0;
        ag0[17][30][29]=110.0;
        ag0[17][30][30]=110.0;
        ag0[17][30][31]=110.0;
        ag0[17][30][17]=109.0;
        ag0[17][31][30]=110.0;
        ag0[17][31][17]=109.0;
        ag0[3][0][17]=109.5;
        ag0[0][0][17]=110.0;
        ag0[1][0][17]=110.0;
        ag0[2][0][17]=110.0;
        ag0[17][0][17]=109.0;
        ag0[3][1][17]=109.5;
        ag0[4][1][17]=109.5;
        ag0[5][1][17]=109.5;
        ag0[17][1][22]=107.5;
        ag0[0][1][17]=110.0;
        ag0[1][1][17]=110.0;
        ag0[2][1][17]=110.0;
        ag0[13][1][17]=109.5;
        ag0[17][1][17]=109.5;
        ag0[3][2][17]=109.5;
        ag0[4][2][17]=109.5;
        ag0[5][2][17]=109.5;
        ag0[17][2][22]=107.5;
        ag0[0][2][17]=110.0;
        ag0[1][2][17]=110.0;
        ag0[2][2][17]=110.0;
        ag0[17][2][17]=109.4;
        ag0[17][15][22]=126.4;
        ag0[7][15][17]=126.4;
        ag0[3][29][18]=112.0;
        ag0[4][29][18]=112.0;
        ag0[3][0][18]=109.5;
        ag0[4][0][18]=109.5;
        ag0[0][0][18]=111.0;
        ag0[1][0][18]=111.0;
        ag0[2][0][18]=111.0;
        ag0[3][1][18]=109.5;
        ag0[4][1][18]=109.5;
        ag0[18][1][18]=115.0;
        ag0[3][2][18]=109.5;
        ag0[1][12][19]=120.0;
        ag0[2][12][19]=120.0;
        ag0[3][12][19]=120.0;
        ag0[19][12][19]=120.0;
        ag0[1][10][19]=111.0;
        ag0[2][10][19]=111.0;
        ag0[19][10][19]=106.5;
        ag0[0][11][19]=109.5;
        ag0[1][11][19]=109.5;
        ag0[2][11][19]=109.5;
        ag0[19][11][19]=109.5;
        ag0[22][11][24]=120.0;
        ag0[7][11][24]=122.0;
        ag0[13][11][24]=125.0;
        ag0[22][13][24]=126.4;
        ag0[7][13][24]=126.4;
        ag0[5][5][21]=130.0;
        ag0[5][5][23]=130.0;
        ag0[4][10][16]=120.0;
        ag0[6][14][16]=126.0;
        ag0[14][6][21]=125.0;
        ag0[22][22][24]=120.0;
        ag0[1][28][20]=95.0;
        ag0[2][28][20]=95.0; 
        ag0[8][3][29]=112.5;  
        ag0[0][3][8]=112.5; 
        ag0[1][3][8]=112.5; 
        ag0[2][3][8]=112.5; 
        ag0[3][29][8]=108.2; 
        ag0[4][29][8]=108.2; 
        ag0[8][29][30]=110.8; 
        ag0[8][29][18]=112.0; 
        ag0[8][31][17]=108.0; 
        ag0[8][31][30]=110.5; 
        ag0[12][3][12]=120.0; 
        ag0[1][1][12]=107.5;
        ag0[12][1][17]=107.5; 
        ag0[12][2][17]=107.5;
        ag0[9][3][29]=116.5;
        ag0[0][3][9]=116.5;
        ag0[1][3][9]=116.5;
        ag0[2][3][9]=116.5;
        ag0[0][0][9]=113.5;
        ag0[1][0][9]=113.5;
        ag0[2][0][9]=113.5;
        ag0[3][0][9]=107.0;
        ag0[4][0][9]=107.0;
        ag0[9][0][18]=108.0;
        ag0[1][1][9]=113.5;
        ag0[3][1][9]=107.0;
        ag0[4][1][9]=107.0;
        ag0[9][1][17]=109.5;
        ag0[9][1][18]=108.0;
        ag0[9][2][17]=109.5;
        ag0[10][4][29]=112.5;
        ag0[0][4][10]=116.5;
        ag0[1][4][10]=116.5;
        ag0[2][4][10]=116.5;
        ag0[10][4][17]=111.0;
        ag0[10][1][17]=109.5;
        ag0[10][1][18]=109.5;
        ag0[1][1][10]=110.0;
        ag0[10][2][17]=109.5;
        ag0[0][0][11]=110.0;
        ag0[1][0][11]=110.0;
        ag0[2][0][11]=110.0;
        ag0[3][0][11]=110.0;
        ag0[4][0][11]=110.0;
        ag0[11][0][18]=107.5;
        ag0[3][1][11]=110.0;
        ag0[4][1][11]=110.0;
        ag0[1][1][11]=110.0;
        ag0[11][1][17]=107.5;
        ag0[11][1][18]=107.5;
        ag0[11][2][17]=107.5;
        ag0[5][5][14]=110.0;
        ag0[1][5][14]=120.0;
        ag0[14][5][23]=120.0;
        ag0[14][5][21]=125.0;
        ag0[13][22][15]=110.0;
        ag0[15][22][17]=125.0;
        ag0[15][22][24]=125.0;
        ag0[15][7][22]=130.6;
        ag0[7][7][15]=107.4;
        ag0[25][3][29]=118.0;
        ag0[0][3][25]=121.0;
        ag0[1][3][25]=121.0;
        ag0[2][3][25]=121.0;
        ag0[16][3][25]=121.0;
        ag0[8][3][25]=122.5;
        ag0[9][3][25]=122.5;
        ag0[25][4][29]=118.0;
        ag0[0][4][25]=121.0;
        ag0[1][4][25]=121.0;
        ag0[2][4][25]=121.0;
        ag0[17][4][25]=122.0;
        ag0[10][4][25]=122.5;
        ag0[22][22][26]=120.0;
        ag0[26][4][29]=118.0;
        ag0[0][4][26]=118.0;
        ag0[1][4][26]=118.0;
        ag0[2][4][26]=118.0;
        ag0[26][4][26]=124.0;
        ag0[2][1][26]=122.0;
        ag0[17][1][26]=118.3;
        ag0[18][1][26]=118.3;
        ag0[22][22][27]=120.0;
        ag0[0][0][27]=110.1;
        ag0[2][0][27]=110.1;
        ag0[17][0][27]=108.89;
        ag0[0][1][27]=110.1;
        ag0[1][1][27]=110.1;
        ag0[2][1][27]=110.1;
        ag0[25][4][26]=124.0;
        ag0[17][1][27]=108.89;
        ag0[17][2][27]=108.89;
        ag0[0][1][28]=112.5;
        ag0[1][1][28]=114.5;
        ag0[2][1][28]=114.5;
        ag0[17][1][28]=111.3;
        ag0[17][2][28]=111.3;
        ag0[29][32][31]=111.0;
        ag0[16][32][30]=109.5;
        ag0[16][32][32]=109.5;
        ag0[16][32][16]=107.5;
        ag0[3][29][32]=106.0;
        ag0[4][29][32]=106.0;
        ag0[31][29][32]=108.5;
        ag0[18][29][32]=107.5;
        ag0[29][31][32]=108.5;
        ag0[17][31][32]=109.15;
        ag0[19][32][31]=109.5;
    }

};

class ProcessData {
public:
    unsigned int inAtoms = 0; // Number of loaded atoms
    unsigned int outAtoms = 0; // Number of outgoing atoms
    vector<LoadAtomInfo> loadedData = {};
   
    unsigned short nRes = 0; // Number of residue sequences
    
    vector<unsigned short> resSeqIn; // [nRes]  -> number of residue sequence from input (nor repeated)
    vector<string> resd2; // [nRes] Len=3 -> residue (aminoAcid) name (last taken from sequence with the same number)
    vector<unsigned short> ress; // ress[outAtoms]  -> number of residue sequence, (ress for output)
    vector<string> resdOut; // [outAtoms] Len=3 -> residue (aminoAcid) name (for output)
    vector<unsigned short> resSeqOut; // [outAtoms]  -> number of residue sequence for output
    vector<unsigned short> assrd; // [outAtoms] 1 - additional record flag, 2 - abnormal distance flag in additional record (for output)
    // (CHECK if we need to load xx0 -> xx for some calculations they hold value 999 or xx0 from Loaded Atoms) 
    vector<double> xx; // [outAtoms] F8.3 ->(xx) (for output) 
    vector<double> yy; // [outAtoms] F8.3 ->(yy) (for output)
    vector<double> zz; // [outAtoms] F8.3 ->(zz) (for output)
    vector<string> atomty; // [outAtoms] Len=4 -> AtomName (for output)
    vector<unsigned short> tkfp; // [outAtoms] out number<-input number to fill records not changed

    vector<unsigned short> atc; // [outAtoms] -> AtomConnections
    vector<vector<unsigned int>> ca; // ca[nRes][2] {0 -> atom idex, 1 -> {0,19} Residue number in aminoAcids }
    vector<vector<int>> bonda; //  bonda[outAtoms][5] ->atom connects, 4 heavy atom bonded num, and number of heavy atoms bonded to each atom
    vector<vector<double>> bond; //  bonda[outAtoms][4] ->bond lengths, con1E,con1R ... con4E,con4R


    ProcessData(char *fn, ServiceData * sDat) {
        servData = sDat;
        inAtoms = DataLoad(fn);
        nRes = resd2.size();
        outAtoms = GetResidueSeries(nRes);
        Heavy_Add(outAtoms);
        HADD(outAtoms);
        AD_1H(outAtoms);
        string outFile = (string)fn + ".h";
        DataOutput(outFile.c_str(), outAtoms);
        
    }
private:
    ServiceData * servData;    
    int DataLoad(char *fn);
    void DataOutput(const char *fn,unsigned int outAtomsNumber);
    int GetResidueSeries(unsigned short numRes);
    void Heavy_Add(unsigned int outAtomsNumber);
    void HADD(unsigned int outAtomsNumber);
    void AD_1H(unsigned int outAtomsNumber);
    void Rotate_Matrix(double &x, double &y, double &z, double ax, double ay, double az, double &xi, double &yi, double &zi, double an);
    vector<unsigned int> SortIndex(vector<double> *arrIn);

};

#endif